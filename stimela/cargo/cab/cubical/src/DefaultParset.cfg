[data]
_Help           = Visibility data options
ms              =               # Name of measurement set (MS) #type:str
column          = DATA          # Name of MS column to read for data. #metavar:COLUMN #type:str
time-chunk      = 32            # Chunk data up by this number of timeslots. This limits the amount of data
                                  processed at once. Smaller chunks allow for a smaller RAM footprint and 
                                  greater parallelism, but this sets an upper limit on the solution intervals
                                  that may be employed. Specify as an integer number of timeslots, or a value with a unit
                                  (e.g. '300s'). 0 means use full time axis. #metavar:TIME
freq-chunk      = 32            # Chunk data by this number of channels. See time-chunk for info. Specify as an
                                  integer number of channels, or a value with a unit (e.g. '128MHz').
                                  0 means full frequency axis. #metavar:FREQ
rebin-time      = 1             # Rebin data in time on the fly. Specify as a number of timeslots to average
                                  together, or a value with a unit (e.g. '5s'). #metavar:TIME
rebin-freq      = 1             # Rebin data in frequency on the fly. Specify as a number of channels to average
                                  together, or a value with a unit (e.g. '4MHz'). #metavar:FREQ
chunk-by        = SCAN_NUMBER   # If set, then time chunks will be broken up whenever the value in the named
                                  column(s) jumps by >JUMPSIZE. Multiple column names may be given, separated
                                  by commas. Use None to disable. #metavar:COLUMNS
chunk-by-jump   = 1             # The jump size used in conjunction with chunk-by. If 0, then any change in
                                  value is a jump. If n, then the change must be >n. #metavar:JUMPSIZE
                                  #type:float
single-chunk    =               # If set, processes just one chunk of data matching the chunk ID. Useful for 
                                  debugging. #metavar:CHUNK_ID

[sel]
_Help = Data selection options
field           = 0             # FIELD_ID to read from the MS. #metavar:FIELD #type:int
ddid            = None          # DATA_DESC_IDs to read from the MS. Default reads all. Can be specified as
                                  e.g. "5", "5,6,7", "5~7" (inclusive range), "5:8" (exclusive range),
                                  "5:" (from 5 to last). #metavar:DDID
taql            =               # Additional TaQL selection string. Combined with other selection options.
                                  #metavar:TAQL #type:str
chan            =               # Channels to read (within each DDID). Default reads all. Can be specified as
                                  e.g. "5", "10~20" (10 to 20 inclusive), "10:21" (same), "10:" (from 10 to
                                  end), ":10:2" (0 to 9 inclusive, stepped by 2), "~9:2" (same).#metavar:CHANNELS

[model]
_Help			= Calibration model options
list            =               # Predict model visibilities from given LSM (using Montblanc). 
                                  #metavar:FILENAME #type:str
ddes            = auto          # Enable direction-dependent models. If 'auto', this is determined
                                  by --sol-jones and --model-list, otherwise, enable/disable
                                  explicitly. #options:never|auto|always
beam-pattern	= None		    # Apply beams if specified eg. 'beam_$(corr)_$(reim).fits' or 
                                  'beam_$(CORR)_$(REIM).fits'
beam-l-axis		= None
beam-m-axis		= None
pa-rotate       = None         # Apply parallactic angle rotation to model visibilities.
feed-rotate     = None         # Apply a feed angle rotation to the model visibilities
null-v          = 0            # Rotate model Stokes V to zero. Special mode for some types of polcal. #options:None|0|1|-1
                                  Use 1 if the PZD is expected to be from -90 to 90deg, or -1 if >90deg or <-90deg

[montblanc]
_Help           = Montblanc simulation options 
device-type     = CPU           # Use CPU or GPU for simulation. #options:CPU|GPU
dtype           = float         # Precision for simulation. DEPRECATED: forcing float for now since MS data is float
                                anyway. #options:float|double #type:str
feed-type       = linear        # Simulate using linear or circular feeds. #options:linear|circular
mem-budget      = 1024          # Memory budget in MB for simulation. #type:int
verbosity       = WARNING       # verbosity level of Montblanc's console output #metavar:LEVEL
                                  #options:DEBUG|INFO|WARNING|ERROR
threads         = 0             # Number of OMP threads to run. Note that --dist-pin-io overrides this, if set.
                                  If 0, uses default setting. #metavar:N #type:int

[weight]
_Help           = Weighting options
column          = WEIGHT_SPECTRUM   # Column to read weights from. Weights are applied by default. Specify an
                                      empty string to disable. 

[flags]
_Help           = General flagging options
apply             = -cubical    # Which flagsets will be applied prior to calibration. #metavar:[-]FLAGSET(s)
                                  Use a comma-separated list of flagset name to use bitflags. Use "-FLAGSET" to apply
                                  all bitflags except the named flagset ("-cubical" is useful, to ignore the flags of
                                  a previous CubiCal run). Use "FLAG" to just apply FLAG/FLAG_ROW.
auto-init         = legacy      # Insert BITFLAG column if it is missing, and initialize the named flagset
                                  from FLAG/FLAG_ROW.
save              = cubical     # Save flags to named flagset in BITFLAG. If none or 0, will not save.
save-legacy       = auto        # Controls whether output flags are written to FLAG/FLAG_ROW. If set to 'auto', then
                                  follows the --flag-save option. If set to 'apply', then fills FLAG/FLAG_ROW based
                                  on the --flags-apply setting. #options:0|1|auto|apply
reinit-bitflags   = 0           # If true, reinitializes BITFLAG column from scratch. Useful if you ended up
                                  with a botched one, but be careful what the state of the FLAG/FLAG_ROW column
                                  is when you use this option.#type:bool
warn-thr          = 0.3         # If more than this fraction of data is flagged by the solver, issues gentle warnings
                                #type:float
see-no-evil       = 0           # Proceed even if flag columns appear to be botched or damaged.
                                #type:bool

[postmortem]
_Help             = Options for "postmortem" flagging based on solution statistics
enable            = 0           # If True, will do an extra round of flagging at the end based on solution statistics
                                NB: EXPERIMENTAL. USE AT OWN RISK. #type:bool
tf-chisq-median   = 1.2         # Intervals with chi-squared values larger than X times the median
                                  chi-square value will be flagged. #metavar:X #type:float
tf-np-median      = 0.5         # Intervals with a number of valid point less than X times the
                                  median number of valid points will be flagged. #metavar:X #type:float
time-density      = 0.5         # If more than the given fraction of data in a timeslot is flagged, flag entire timeslot.
                                  #metavar:FRAC #type:float
chan-density      = 0.5         # If more than the given fraction of data in a timeslot is flagged, flag entire channel.
                                  #metavar:FRAC #type:float
ddid-density      = 0.5         # If more than the given fraction of data in a DDID is flagged, flag entire DDID.
                                  #metavar:FRAC #type:float

[madmax]
_Help             = Options for the "Mad Max" flagger
enable            = 0           # Enable Mad Max flagging in the solver. This computes the median absolute residual
                                 (i.e. median absolute deviation from zero), and flags visibilities exceeding the thresholds
                                 set below. Use 1 to enable. For a trial run, if you don't want the flags to be written
                                 out, use either 'pretend' to compute Mad Max flags (and report statistics and make plots),
                                 then throw them away, or 'trial' to also apply the flags during solutions, but not write
                                 them out.
                                 #options:0|1|pretend|trial
estimate          = corr        # MAD estimation mode. Use 'corr' for a separate estimate per each baseline and
                                correlation. Otherwise, a single estimate per baseline is computed using 'all' correlations,
                                or only the 'diag' or 'offdiag' correlations. #options:corr|all|diag|offdiag
diag              = 1           # Flag on on-diagonal (parallel-hand) residuals. #type:bool
offdiag           = 1           # Flag on off-diagonal (cross-hand) residuals. #type:bool
threshold         = 0,10        # Threshold for MAD flagging per baseline (specified in sigmas). Residuals exceeding
                                S*MAD/1.428 will be flagged. MAD is computed per baseline.
                                This can be specified as a list e.g. N1,N2,N3,... The first value is used to flag
                                residuals before a solution starts (use 0 to disable), the next value is used when the residuals
                                are first recomputed during the solution several iteratins later (see -chi-int), etc.
                                A final pass may be done at the end of the solution. The last value in the list is reused
                                if necessary. Using a list with gradually decreasing values may be sensible. #metavar:S
global-threshold  = 0,12        # Threshold for global median MAD (MMAD) flagging. MMAD is computed as the median of the
                                per-baseline MADs. Residuals exceeding S*MMAD/1.428 will be flagged. Can be specified
                                as a list, with the same semantics as --madmax-threshold. #metavar:S
plot              = 1           # Enable plots for Mad Max flagging. Use 'show' to show figures interactively.
                                Plots will show the worst flagged baseline, and a median flagged baseline, provided the
                                fraction of flagged visibilities is above --madmax-plot-frac-above.
                                #options:0|1|show
plot-frac-above   = 0.01        # Threshold (in terms of fraction of visibilities flagged) above which Mad Max plots
                                will be generated.
plot-bl           =             # Given baseline will always be plotted #type:str
flag-ant          = 0           # Flag antennas with excessive residuals, based on MAD criterion. Note that currently
                                --madmax-plot must be enabled for this to work.
flag-ant-thr      = 5           # Threshold (in sigmas) used to flag bad antennas.




[sol]
_Help            = Solution options which apply at the solver level
jones            = G            # Comma-separated list of Jones terms to enable, e.g. "G,B,dE"
                                  (default: %default)
precision        = 32           # Solve in single or double precision #options:32|64
delta-g          = 1e-6         # Theshold for gain accuracy - gains which improve by less than this value
                                  are considered converged.
delta-chi        = 1e-6         # Theshold for solution stagnancy - if the chi-squared is improving by less
                                  than this value, the gain is considered stalled.
chi-int          = 5            # Number of iterations to perform between chi-suqared checks. This is done to
                                  avoid computing the expensive chi-squared test evey iteration.
last-rites       = 1            # Re-estimate chi-squred and noise at the end of a solution cycle. Disabling
                                  last rites can save a bit of time, but makes the post-solution stats less
                                  informative. #type:bool
stall-quorum     = 0.99         # Minimum percentage of solutions which must have stalled before terminating
                                  the solver.
diag-diag        = 0            # If true, then data, model and gains are taken to be diagonal. Off-diagonal
                                  terms in data and model are ignored. This option is then enforced on
                                  all Jones terms. #type:bool
term-iters       =              # Number of iterations per Jones term. If empty, then each Jones
                                  term is solved for once, up to convergence, or up to its -max-iter
                                  setting.
                                  Otherwise, set to a list giving the number of iterations per Jones term.
                                  For example, given two Jones terms and --sol-num-iter 10,20,10, it will
                                  do 10 iterations on the first term, 20 on the second, and 10 again on the
                                  first.
                                  #metavar:N1,N2,...
min-bl           = 0            # Min baseline length to solve for #metavar:METERS #type:float
max-bl           = 0            # Max baseline length to solve for. If 0, no maximum is applied.
                                  #metavar:METERS #type:float
subset           =              # Additional subset of data to actually solve for. Any TaQL string may be
                                  used. #metavar:TaQL #type:str


[bbc]
_Help            = Options for baseline-based corrections (a.k.a. BBCs, a.k.a. interferometer gains).
load-from        =              # Load and apply BBCs computed in a previous run. Apply with care! This will 
                                  tend to suppress all unmodelled flux towards the centre of the field.
                                  #metavar:FILENAME
compute-2x2      = 0            # Compute full 2x2 BBCs (as opposed to diagonal-only). Only useful if you
                                  really trust the polarisation information in your sky model. #type:bool
apply-2x2        = 0            # Apply full 2x2 BBCs (as opposed to diagonal-only). Only enable this if you
                                  really trust the polarisation information in your sky model. #type:bool
save-to          = {data[ms]}/BBC-field_{sel[field]}-ddid_{sel[ddid]}.parmdb # Compute suggested BBCs at end of run,
                                  and save them to the given database. It can be useful to have this always
                                  enabled, since the BBCs provide useful diagnostics of the solution quality 
                                  (and are not actually applied without a load-from setting). #metavar:FILENAME
per-chan         = 1            # Compute BBCs per-channel (else across entire band). #type:bool
plot             = 1            # Generate output BBC plots. #type:bool

[dist]
_Help           = Parallelization and distribution options
ncpu            = 0             # Max number of CPU cores to use. #type:int #metavar:N
nworker         = 0             # Number of worker processes to launch (excluding the I/O worker).
                                  0: determine automatically from the --dist-ncpu setting. #type:int #metavar:N
nthread         = 0             # Number of OMP threads to use. 0: determine automatically. #type:int #metavar:N
max-chunks      = 0             # Maximum number of time/freq data-chunks to load into memory
                                  simultaneously. If 0, then as many as possible will be loaded. #type:int
min-chunks      = 0             # Minimum number of time/freq data-chunks to load into memory
                                  simultaneously. If 0, determined automatically. #type:int
pin             = 0             # If empty or None, processes will not be pinned to cores. Otherwise, set to the starting
                                  core number, or "N:K" to start with N and step by K. #metavar:CORES
pin-io          = 0             # If not 0, pins the I/O & Montblanc process to a separate core, or cores
                                  (if --montblanc-threads is specified). Ignored if --dist-pin is not set. #type:bool
pin-main        = io            # If set, pins the main process to a separate core. If set to "io", pins it to the same
                                  core as the I/O process, if I/O process is pinned. Ignored if --dist-pin is not set.
                                  #options:0|1|io

[out]
_Help           = Options for output products
name            = cubical           # Base name of output files. #metavar:BASENAME #type:str
mode            = sc                # Operational mode.
                                        [so] solve only;
                                        [sc] solve and generate corrected visibilities;
                                        [sr] solve and generate corrected residuals;
                                        [ss] solve and generate uncorrected residuals;
                                        [ac] apply solutions, generate corrected visibilities;
                                        [ar] apply solutions, generate corrected residuals;
                                        [as] apply solutions, generate uncorrected residuals;
                                      #options:so|sc|sr|ss|ac|ar|as #metavar:MODE
column          = CORRECTED_DATA    # Output MS column name (if applicable). #metavar:COLUMN
model-column    =                   # If set, model visibilities will be written to the specified column. #metavar:COLUMN
weight-column   =                   # If set weights from the Robust Solver will be written to the specified colum.
                                    # This should be set only if we are using the robust solver.
reinit-column   = 0                 # Reinitialize output MS column. Useful if the column is in a half-filled
                                      or corrupt state. #type:bool
subtract-model  = 0                 # Which model to subtract, if generating residuals. #metavar:MODEL
                                      #type:int
subtract-dirs   = :                 # Which model directions to subtract, if generating residuals. ":" 
                                      subtracts all. Can also be specified as "N", "N:M", ":N", "N:", "N,M,K".
                                      #metavar:SLICE. #metavar:DIRS    
plots           = 1                 # Generate summary plots. Use 'show' to show summary plots interactively.
casa-gaintables = 1                 # Export gaintables to CASA caltable format. Tables are exported to same
                                    directory as set for cubical databases. #type:bool
derotate        = None              # Explicitly enables or disables derotation of output visibilities

[log]
_Help = Options related to logging
memory          = 1             # Log memory usage. #type:bool
boring          = 0             # Disable progress bars and some console output. #type:bool
append          = 0             # Append to log file if it exists. #type:bool
verbose         = 0             # Default console output verbosity level. #metavar:LEVEL(s)
                                  Can either be a single number, or a sequence of "name=level,name=level,..."
                                  assignments.
file-verbose    = None          # Default logfile output verbosity level. #metavar:LEVEL(s)
                                  Can either be a single number, or a sequence of "name=level,name=level,..."
                                  assignments. If None, then this simply follows the console level.

[debug]
_Help = Debugging options for the discerning masochist
pdb                 = 0         # Jump into pdb on any exception. #type:bool
panic-amplitude     = 0         # Throw an error if a visibility amplitude in the results exceeds the given value.
                                  Useful for troubleshooting. #type:float
stop-before-solver  = 0         # Invoke pdb before entering the solver. #type:bool
escalate-warnings   = 0         # Escalate warnings (e.g. np.ComplexWarning) into proper exceptions. #type:bool

[misc]
_Help             = Miscellaneous options
random-seed       = None        # Seed random number generator with explicit seed. Useful for reproducibility
                                  of the random-based optimizations (sparsification, etc.). #metavar:N
parset-version    = 0.1         # Parset version number, for migration purposes. Can't be specified on command
                                  line. #no_cmdline:1

[JONES-TEMPLATE]
_Help = Options for {LABEL}-Jones term
_NameTemplate = {LABEL}         # Designates this section as a "template", and gives the string for its name.
_ExpandedFrom  = --sol-jones    # Identifies --section-option that determines what templated sections to
                                  instantiate
_OtherTemplates = _Help:label   # Colon-separated list of options which need to have their values templated.
label       = {LABEL}           # Jones label ("G", "dE"). Substituted automatically. #no_cmdline:1 #no_print:1
solvable    = 1                 # Set to 0 (and specify -load-from or -xfer-from) to load a non-solvable
                                  term is loaded from disk. Not to be confused with --sol-jones, which
                                  determines the active Jones terms.
                                  #type:bool
type        = complex-2x2       # Type of Jones matrix to solve for. Note that if multiple Jones terms are
                                  enabled, then only complex-2x2 is supported.
                                  #options:complex-2x2|complex-diag|phase-diag|robust-2x2|f-slope|t-slope|tf-plane
load-from   =                   # Load solutions from given database. The DB must define solutions
                                  on the same time/frequency grid (i.e. should normally come from
                                  calibrating the same pointing/observation). By default, the Jones
                                  matrix label is used to form up parameter names, but his may be
                                  overridden by adding an explicit "//LABEL" to the database filename.
                                  #metavar:FILENAME[//LABEL]
xfer-from   =                   # Transfer solutions from given database. Similar to -load-from, but
                                  solutions will be interpolated onto the required time/frequency grid,
                                  so they can originate from a different field (e.g. from a calibrator).
                                  #metavar:FILENAME[//LABEL]
save-to     = {data[ms]}/{JONES}-field_{sel[field]}-ddid_{sel[ddid]}.parmdb # Save solutions to given database.
                                  #metavar:FILENAME
dd-term     = 0                 # Determines whether this term is direction dependent. --model-ddes must
                                  be enabled. #type:bool
fix-dirs    =                   # For DD terms, makes the listed directions non-solvable. 
                                  #metavar:DIR1[,DIR2,...]
diag-diag   = 0                 # If true, then data, model and gains are taken to be diagonal. Off-diagonal
                                  terms in data and model are ignored. #type:bool
update-type = full              # Determines update type. This does not change the Jones solver type, but
                                  restricts the update rule to pin the solutions within a certain subspace:
                                  'full' is the default behaviour;
                                  'diag' pins the off-diagonal terms to 0;
                                  'phase-diag' also pins the amplitudes of the diagonal terms to unity;
                                  'amp-diag' also pins the phases to 0. #options:full|phase-diag|diag|amp-diag
time-int    = 1                 # Time solution interval for this term. #metavar:TIMESLOTS
freq-int    = 1                 # Frequency solution interval for this term. #metavar:CHANNELS
max-prior-error = .1            # Flag solution intervals where the prior error estimate is above this value. #type:float
max-post-error = .1             # Flag solution intervals where the posterior variance estimate is above this value. #type:float
clip-low    = .1                # Amplitude clipping - flag solutions with diagonal amplitudes below this
                                  va
                                  lue. #metavar:AMPL #type:float
clip-high   = 10                # Amplitude clipping - flag solutions with any amplitudes above this value. 0 
                                  disables. #metavar:AMPL #type:float
clip-after  = 5                 # Number of iterations after which to start clipping this gain. #metavar:NITER 
                                  #type:int
max-iter    = 20                # Maximum number of iterations spent on this term. #metavar:NITER
conv-quorum = 0.99              # Minimum percentage of converged solutions to accept. #metavar:FRACTION
ref-ant     = None              # Reference antenna - its phase is guaranteed to be zero. #metavar:ANTENNA
prop-flags  = default           # Flag propagation policy. Determines how flags raised on gains propagate back
                                  into the data. Options are 'never' to never propagate, 'always' to always
                                  propagate, 'default' to only propagate flags from direction-independent gains.
                                  #options:never|always|default
robust-cov = hybrid             # Determines how the residuals covariance matrix is computed if the robust-2x2
                                  solver is selected. Options are 'compute' to compute normaly, 'identity' to set the 
                                  covariance to 1 (identity matrix) as in the Robust-t paper, and 'hybrid' which is the default computes
                                  the covaraince matrix, C but sets it to 1 if the elements are greater than 1.
                                  #options:compute|identity|hybrid
robust-npol = 2                 # The number of correlations (polarizations) actually present in the visibilities. 
                                  This option only applies if the robust-2x2 solver is selected.
                                  #options:2|4 #type:int
robust-int =  5                 # Number of iterations after which the v-parameter is recomputed for the robust solver
                                  #type:int
robust-save-weights = 0         # Determines if the appied weights from the robust-2x2 solver are stored.
                                  This option only applies if the robust-2x2 solver is selected. If this option is set
                                  and output-weight-column must be set as well.
                                  #type:bool

[g]
_Templated  = 1
dd-term     = 0                 # Determines whether this term is direction dependent. --model-ddes must
time-int    = 1                 # Time solution interval for this term. 0 means use entire chunk. #metavar:TIMESLOTS
freq-int    = 1                 # Frequency solution interval for this term. 0 means use entire chunk. #metavar:CHANNELS
clip-low    = .1                # Amplitude clipping - flag solutions with diagonal amplitudes below this
                                  value. #metavar:AMPL #type:float
clip-high   = 10                # Amplitude clipping - flag solutions with any amplitudes above this value.
                                  #metavar:AMPL #type:float
clip-after  = 5                 # Number of iterations after which to clip this gain. #metavar:NITER #type:int
conv-quorum = 0.99              # Minimum percentage of converged solutions to accept. #metavar:FRACTION
ref-ant     = None              # Reference antenna - its phase is guaranteed to be zero. #metavar:ANTENNA

[g1]
_Templated  = 1
dd-term     = 0                 # Determines whether this term is direction dependent. --model-ddes must
time-int    = 1                 # Time solution interval for this term. 0 means use entire chunk. #metavar:TIMESLOTS
freq-int    = 1                 # Frequency solution interval for this term. 0 means use entire chunk. #metavar:CHANNELS
clip-low    = .1                # Amplitude clipping - flag solutions with diagonal amplitudes below this
                                  value. #metavar:AMPL #type:float
clip-high   = 10                # Amplitude clipping - flag solutions with any amplitudes above this value.
                                  #metavar:AMPL #type:float
clip-after  = 5                 # Number of iterations after which to clip this gain. #metavar:NITER #type:int
conv-quorum = 0.99              # Minimum percentage of converged solutions to accept. #metavar:FRACTION
ref-ant     = None              # Reference antenna - its phase is guaranteed to be zero. #metavar:ANTENNA

[g2]
_Templated  = 1
dd-term     = 0                 # Determines whether this term is direction dependent. --model-ddes must
time-int    = 1                 # Time solution interval for this term. 0 means use entire chunk. #metavar:TIMESLOTS
freq-int    = 1                 # Frequency solution interval for this term. 0 means use entire chunk. #metavar:CHANNELS
clip-low    = .1                # Amplitude clipping - flag solutions with diagonal amplitudes below this
                                  value. #metavar:AMPL #type:float
clip-high   = 10                # Amplitude clipping - flag solutions with any amplitudes above this value.
                                  #metavar:AMPL #type:float
clip-after  = 5                 # Number of iterations after which to clip this gain. #metavar:NITER #type:int
conv-quorum = 0.99              # Minimum percentage of converged solutions to accept. #metavar:FRACTION
ref-ant     = None              # Reference antenna - its phase is guaranteed to be zero. #metavar:ANTENNA

[g3]
_Templated  = 1
dd-term     = 0                 # Determines whether this term is direction dependent. --model-ddes must
time-int    = 1                 # Time solution interval for this term. 0 means use entire chunk. #metavar:TIMESLOTS
freq-int    = 1                 # Frequency solution interval for this term. 0 means use entire chunk. #metavar:CHANNELS
clip-low    = .1                # Amplitude clipping - flag solutions with diagonal amplitudes below this
                                  value. #metavar:AMPL #type:float
clip-high   = 10                # Amplitude clipping - flag solutions with any amplitudes above this value.
                                  #metavar:AMPL #type:float
clip-after  = 5                 # Number of iterations after which to clip this gain. #metavar:NITER #type:int
conv-quorum = 0.99              # Minimum percentage of converged solutions to accept. #metavar:FRACTION
ref-ant     = None              # Reference antenna - its phase is guaranteed to be zero. #metavar:ANTENNA

[b]
_Templated  = 1
dd-term     = 0                 # Determines whether this term is direction dependent. --model-ddes must
time-int    = 1                 # Time solution interval for this term. 0 means use entire chunk. #metavar:TIMESLOTS
freq-int    = 1                 # Frequency solution interval for this term. 0 means use entire chunk. #metavar:CHANNELS
clip-low    = .1                # Amplitude clipping - flag solutions with diagonal amplitudes below this
                                  value. #metavar:AMPL #type:float
clip-high   = 10                # Amplitude clipping - flag solutions with any amplitudes above this value.
                                  #metavar:AMPL #type:float
clip-after  = 5                 # Number of iterations after which to clip this gain. #metavar:NITER #type:int
conv-quorum = 0.99              # Minimum percentage of converged solutions to accept. #metavar:FRACTION
ref-ant     = None              # Reference antenna - its phase is guaranteed to be zero. #metavar:ANTENNA

[b1]
_Templated  = 1
dd-term     = 0                 # Determines whether this term is direction dependent. --model-ddes must
time-int    = 1                 # Time solution interval for this term. 0 means use entire chunk. #metavar:TIMESLOTS
freq-int    = 1                 # Frequency solution interval for this term. 0 means use entire chunk. #metavar:CHANNELS
clip-low    = .1                # Amplitude clipping - flag solutions with diagonal amplitudes below this
                                  value. #metavar:AMPL #type:float
clip-high   = 10                # Amplitude clipping - flag solutions with any amplitudes above this value.
                                  #metavar:AMPL #type:float
clip-after  = 5                 # Number of iterations after which to clip this gain. #metavar:NITER #type:int
conv-quorum = 0.99              # Minimum percentage of converged solutions to accept. #metavar:FRACTION
ref-ant     = None              # Reference antenna - its phase is guaranteed to be zero. #metavar:ANTENNA

[b2]
_Templated  = 1
dd-term     = 0                 # Determines whether this term is direction dependent. --model-ddes must
time-int    = 1                 # Time solution interval for this term. 0 means use entire chunk. #metavar:TIMESLOTS
freq-int    = 1                 # Frequency solution interval for this term. 0 means use entire chunk. #metavar:CHANNELS
clip-low    = .1                # Amplitude clipping - flag solutions with diagonal amplitudes below this
                                  value. #metavar:AMPL #type:float
clip-high   = 10                # Amplitude clipping - flag solutions with any amplitudes above this value.
                                  #metavar:AMPL #type:float
clip-after  = 5                 # Number of iterations after which to clip this gain. #metavar:NITER #type:int
conv-quorum = 0.99              # Minimum percentage of converged solutions to accept. #metavar:FRACTION
ref-ant     = None              # Reference antenna - its phase is guaranteed to be zero. #metavar:ANTENNA

[b3]
_Templated  = 1
dd-term     = 0                 # Determines whether this term is direction dependent. --model-ddes must
time-int    = 1                 # Time solution interval for this term. 0 means use entire chunk. #metavar:TIMESLOTS
freq-int    = 1                 # Frequency solution interval for this term. 0 means use entire chunk. #metavar:CHANNELS
clip-low    = .1                # Amplitude clipping - flag solutions with diagonal amplitudes below this
                                  value. #metavar:AMPL #type:float
clip-high   = 10                # Amplitude clipping - flag solutions with any amplitudes above this value.
                                  #metavar:AMPL #type:float
clip-after  = 5                 # Number of iterations after which to clip this gain. #metavar:NITER #type:int
conv-quorum = 0.99              # Minimum percentage of converged solutions to accept. #metavar:FRACTION
ref-ant     = None              # Reference antenna - its phase is guaranteed to be zero. #metavar:ANTENNA

[dd]
_Templated  = 1
dd-term     = 1                 # Determines whether this term is direction dependent. --model-ddes must
clip-low    = 0                 # Amplitude clipping - flag solutions with diagonal amplitudes below this
                                  value. #metavar:AMPL #type:float
clip-high   = 0                 # Amplitude clipping - flag solutions with any amplitudes above this value.
                                  #metavar:AMPL #type:float

[dd1]
_Templated  = 1
dd-term     = 1                 # Determines whether this term is direction dependent. --model-ddes must
clip-low    = 0                 # Amplitude clipping - flag solutions with diagonal amplitudes below this
                                  value. #metavar:AMPL #type:float
clip-high   = 0                 # Amplitude clipping - flag solutions with any amplitudes above this value.
                                  #metavar:AMPL #type:float
[dd2]
_Templated  = 1
dd-term     = 1                 # Determines whether this term is direction dependent. --model-ddes must
clip-low    = 0                 # Amplitude clipping - flag solutions with diagonal amplitudes below this
                                  value. #metavar:AMPL #type:float
clip-high   = 0                 # Amplitude clipping - flag solutions with any amplitudes above this value.
                                  #metavar:AMPL #type:float

[dd3]
_Templated  = 1
dd-term     = 1                 # Determines whether this term is direction dependent. --model-ddes must
clip-low    = 0                 # Amplitude clipping - flag solutions with diagonal amplitudes below this
                                  value. #metavar:AMPL #type:float
clip-high   = 0                 # Amplitude clipping - flag solutions with any amplitudes above this value.
                                  #metavar:AMPL #type:float

##  * ``DefaultParset.cfg`` now contains comment clauses which are auto-parsed into documentation by ``ReadCfg.py``, and
##  automatically converted into OptionParser command-line arguments. 
##
##  * Command-line arguments are formed as ``--Section-OptionName``.
##
##  * Each section can contain a ``_Help = section description`` option. This is turned into a docstring for the section.
##
##  * Each option line can contain a comment, preceded by "#". This is turned into a docstring for the option. Note that
##  long comments can be continued on the next line simply by indenting the next line. 
##
##  * Option comments can have embedded attributes of the form ``#attr:value``. These are removed from the docstring 
##  automatically. All attributes are optional! A few attributes have special meaning, as per below. 
##
##  * ``#type:TYPE`` forces the option to be interpreted as a specific Python type. E.g. ``#type:bool``, ``#type:str``,
##  ``#type:float``. In the absence of an explicit type attribute, the option will be parsed into a valid Python value 
##  (using ``eval()``), and converted into a string if that fails. This means that e.g. "None" will be interpreted as 
##  ``None`` and not the string ``"None"``. Note that this mechanism has some pitfalls: for example "all" gets parsed 
##  into the built-in ``all()`` function (unless surrounded by quotes), so if you want to make sure an option is treated 
##  as a string, make sure you add a ``#type:str`` attribute. 
##
##  * ``#options:A|B|C`` specifies that the option is a "selector" with a fixed set of values. See, for example, 
##  ``#options:None|LOFAR|FITS`` in BeamModel. 
##
##  * ``#metavar:VAR`` is passed to the metavar argument of ``OptionParser.add_option()``. This makes for a nicer-looking
##   command-line help. E.g. ``#metavar:MHz``. 
##
##  * ``#cmdline-only:1`` specifies that the option can only be changed from the command-line, not via a parset. 
##
##  * Options can have aliases. *NB: I'm not convinced about this feature. Maybe it makes things too confusing and should
##   be removed.* For example, 
##
##  ```
##  [Caching]
##  PSF|CachePSF            = 1         # Cache PSF data. May be expensive with large images, hence optional #type:bool
##  ```
##
##  means that the command-line option can be specified as ``--Caching-PSF`` or ``--CachePSF``. The second form is the 
##  "global alias". The GD object in DDFacet will contain both ``GD["Caching"]["PSF"]`` and 
##  ``GD["Caching"]["CachePSF"]``, set to the same value.
