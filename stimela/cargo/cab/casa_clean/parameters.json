{
    "task": "casa_clean", 
    "base": "stimela/casa", 
    "tag": "1.2.5", 
    "description": "CASA Clean task. For imaging and deconvolution", 
    "prefix": "", 
    "binary": "clean", 
    "msdir": true, 
    "parameters": [
        {
            "info": "Name of input visibility file", 
            "delimiter": ",", 
            "name": "msname", 
            "io": "msfile", 
            "dtype": "list:file", 
            "required": true, 
            "mapping": "vis"
        }, 
        {
            "info": "Pre-name of output images", 
            "name": "prefix", 
            "io": "output", 
            "default": null, 
            "dtype": "file", 
            "mapping": "imagename"
        }, 
        {
            "info": "Text file with image names, sizes,centers for outliers", 
            "dtype": "file", 
            "default": null, 
            "name": "outlierfile", 
            "io": "input"
        }, 
        {
            "info": "Field Name or id", 
            "dtype": [
                "list:str", 
                "list:int"
            ], 
            "delimiter": ",", 
            "name": "field", 
            "default": null
        }, 
        {
            "info": "Spectral windows e.g. '0~3', '' is all", 
            "dtype": "str", 
            "delimiter": " ", 
            "name": "spw", 
            "default": null
        }, 
        {
            "info": "Other data selection parameters", 
            "dtype": "bool", 
            "default": true, 
            "name": "selectdata"
        }, 
        {
            "info": "Range of time to select from data, e.g. timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'", 
            "dtype": [
                "str", 
                "list:str"
            ], 
            "delimiter": ",", 
            "name": "timerange", 
            "default": null
        }, 
        {
            "info": "Select data within uvrange", 
            "dtype": [
                "str", 
                "list:str"
            ], 
            "delimiter": ",", 
            "name": "uvrange", 
            "default": null
        }, 
        {
            "info": "Select data based on antenna/baseline", 
            "dtype": [
                "str", 
                "list:str"
            ], 
            "delimiter": " ", 
            "name": "antenna", 
            "default": null
        }, 
        {
            "info": "Scan number range", 
            "dtype": [
                "str", 
                "list:str"
            ], 
            "delimiter": " ", 
            "name": "scan", 
            "default": null
        }, 
        {
            "info": "Observation ID range", 
            "dtype": [
                "str", 
                "list:str"
            ], 
            "delimiter": " ", 
            "name": "observation", 
            "default": null
        }, 
        {
            "info": "Scan Intent(s)", 
            "dtype": [
                "str", 
                "list:str"
            ], 
            "delimiter": " ", 
            "name": "intent", 
            "default": null
        }, 
        {
            "info": "Spectral gridding type (mfs, channel,velocity, frequency)", 
            "dtype": "str", 
            "default": "mfs", 
            "name": "mode", 
            "choices": [
                "mfs", 
                "channel", 
                "velocity", 
                "frequency"
            ]
        }, 
        {
            "info": "Number of channels (planes) in output image; -1 = all", 
            "dtype": "int", 
            "default": -1, 
            "name": "nchan"
        }, 
        {
            "info": "Begin the output cube at the frequency of this channel in the MS", 
            "dtype": [
                "str", 
                "int", 
                "float"
            ], 
            "default": null, 
            "name": "start"
        }, 
        {
            "info": "Width of output channel relative to MS channel (# to average)", 
            "dtype": [
                "str", 
                "int", 
                "float"
            ], 
            "default": 1, 
            "name": "width"
        }, 
        {
            "info": "Spectral interpolation (nearest, linear, cubic).", 
            "dtype": "str", 
            "default": "linear", 
            "name": "interpolation", 
            "choices": [
                "nearest", 
                "linear", 
                "cubic"
            ]
        }, 
        {
            "info": "Re-restore the cube image to a common beam when True", 
            "dtype": "bool", 
            "default": false, 
            "name": "resmooth"
        }, 
        {
            "info": "Clean each channel to completion (True), or all channels each cycle (False)", 
            "dtype": "bool", 
            "default": false, 
            "name": "chaniter"
        }, 
        {
            "info": "velocity frame of output image", 
            "dtype": "str", 
            "default": null, 
            "name": "outframe", 
            "choices": [
                "", 
                "LSRK", 
                "LSRD", 
                "BARY", 
                "GEO", 
                "TOPO", 
                "GALACTO", 
                "LGROUP", 
                "CMB"
            ]
        }, 
        {
            "info": "Velocity definition of output image", 
            "dtype": "str", 
            "default": "radio", 
            "name": "veltype", 
            "choices": [
                "radio", 
                "optical"
            ]
        }, 
        {
            "info": "Number of Taylor coefficients to model the sky frequency dependence", 
            "dtype": "int", 
            "default": 1, 
            "name": "nterms"
        }, 
        {
            "info": "Reference frequency (nterms > 1),'' uses central data-frequency", 
            "dtype": "str", 
            "default": null, 
            "name": "reffreq"
        }, 
        {
            "info": "Gridding kernel for FFT-based transforms", 
            "dtype": "str", 
            "default": null, 
            "name": "gridmode", 
            "choices": [
                "", 
                "widefield", 
                "aprojection"
            ]
        }, 
        {
            "info": "Number of w-projection planes for convolution", 
            "dtype": "int", 
            "default": 1, 
            "name": "wprojplanes"
        }, 
        {
            "info": "Number of facets along each axis (main image only)", 
            "dtype": "int", 
            "default": 1, 
            "name": "facets"
        }, 
        {
            "info": "Convolution function cache directory", 
            "dtype": "file", 
            "default": null, 
            "name": "cfcache", 
            "io": "output"
        }, 
        {
            "info": "Parallactic angle increment (degrees) for OTF A-term rotation", 
            "dtype": "float", 
            "default": 5.0, 
            "name": "rotpainc"
        }, 
        {
            "info": "Parallactic angle increment (degrees) for computing A-term", 
            "dtype": "float", 
            "default": 360.0, 
            "name": "painc"
        }, 
        {
            "info": "Maximum number of iterations", 
            "dtype": "int", 
            "default": 500, 
            "name": "clean_iterations", 
            "mapping": "niter"
        }, 
        {
            "info": "Loop gain for cleaning", 
            "dtype": "float", 
            "default": 0.1, 
            "name": "gain"
        }, 
        {
            "info": "Flux level to stop cleaning, must include units: '1.0mJy'", 
            "dtype": "str", 
            "default": "0.0mJy", 
            "name": "threshold"
        }, 
        {
            "info": "Method of PSF calculation to use during minor cycles", 
            "dtype": "str", 
            "default": "clark", 
            "name": "psfmode", 
            "choices": [
                "clark", 
                "clarkstokes", 
                "hogbom"
            ]
        }, 
        {
            "info": "Options: 'csclean' or 'mosaic', '', uses psfmode", 
            "dtype": "str", 
            "default": "csclean", 
            "name": "imagermode", 
            "choices": [
                "csclean", 
                "mosaic"
            ]
        }, 
        {
            "info": "Individually weight the fields of the mosaic", 
            "dtype": "bool", 
            "default": false, 
            "name": "mosweight"
        }, 
        {
            "info": "Gridding method for the image", 
            "dtype": "str", 
            "default": "mosaic", 
            "name": "ftmachine", 
            "choices": [
                "mosaic", 
                "ft", 
                "wproject"
            ]
        }, 
        {
            "info": "Controls scaling of pixels in the image plane. default='SAULT'; example: scaletype='PBCOR' Options:'PBCOR','SAULT'", 
            "dtype": "str", 
            "default": "SAULT", 
            "name": "scaletype", 
            "choices": [
                "SAULT", 
                "PBCOR"
            ]
        }, 
        {
            "info": "Controls whether searching for clean components is done in a constant noise residual image (True) or in an optimal signal-to-noise residual image (False)", 
            "dtype": "bool", 
            "default": true, 
            "name": "flatnoise"
        }, 
        {
            "info": "Controls how often major cycles are done. (e.g. 5 for frequently)", 
            "dtype": "float", 
            "default": 1.5, 
            "name": "cyclefactor"
        }, 
        {
            "info": "Cycle threshold doubles in this number of iterations", 
            "dtype": "int", 
            "default": -1, 
            "name": "cyclespeedup"
        }, 
        {
            "info": "Deconvolution scales (pixels); [] = standard clean", 
            "dtype": "list", 
            "default": null, 
            "name": "multiscale"
        }, 
        {
            "info": "Stop cleaning if the largest scale finds this number of neg components", 
            "dtype": "int", 
            "default": -1, 
            "name": "negcomponent"
        }, 
        {
            "info": "a bias to give more weight toward smaller scales", 
            "dtype": "float", 
            "default": 0.6, 
            "name": "smallscalebias"
        }, 
        {
            "info": "Use interactive clean (with GUI viewer)", 
            "dtype": "bool", 
            "default": false, 
            "name": "interactive"
        }, 
        {
            "info": "Clean iterations before interactive prompt (can be changed)", 
            "dtype": "int", 
            "default": 100, 
            "name": "npercycle"
        }, 
        {
            "info": "Cleanbox(es), mask image(s),region(s), or a level", 
            "dtype": "file", 
            "default": null, 
            "name": "mask", 
            "io": "input"
        }, 
        {
            "info": "x and y image size in pixels.  Single value: same for both", 
            "dtype": [
                "list", 
                "int"
            ], 
            "default": [
                1024, 
                1024
            ], 
            "name": "npix", 
            "mapping": "imsize"
        }, 
        {
            "info": "x and y cell size(s). Default unit arcsec.", 
            "dtype": [
                "list", 
                "str", 
                "float"
            ], 
            "default": [
                "1.0arcsec"
            ], 
            "name": "cellsize", 
            "mapping": "cell"
        }, 
        {
            "info": "Image center: direction or field index", 
            "dtype": "str", 
            "default": null, 
            "name": "phasecenter"
        }, 
        {
            "info": "Rest frequency to assign to image (see help)", 
            "dtype": "str", 
            "default": null, 
            "name": "restfreq"
        }, 
        {
            "info": "Stokes params to image (eg I,IV,IQ,IQUV)", 
            "dtype": "str", 
            "default": "I", 
            "name": "stokes"
        }, 
        {
            "info": "Weighting of uv (natural, uniform,briggs, ...)", 
            "name": "weight", 
            "default": "uniform", 
            "dtype": "str", 
            "mapping": "weighting", 
            "choices": [
                "natural", 
                "uniform", 
                "briggs", 
                "radial", 
                "superuniform"
            ]
        }, 
        {
            "info": "Briggs robustness parameter", 
            "dtype": "float", 
            "default": 0.0, 
            "name": "robust"
        }, 
        {
            "info": "number of pixels to determine uv-cell size 0=> field of view", 
            "dtype": "int", 
            "default": 0, 
            "name": "npixels"
        }, 
        {
            "info": "Apply additional uv tapering of visibilities", 
            "dtype": "bool", 
            "default": false, 
            "name": "uvtaper"
        }, 
        {
            "info": "uv-taper on outer baselines in uv-plane", 
            "dtype": "list:str", 
            "delimiter": " ", 
            "name": "outertaper", 
            "default": null
        }, 
        {
            "info": "uv-taper in center of uv-plane (not implemented)", 
            "dtype": "list:str", 
            "delimiter": " ", 
            "name": "innertaper", 
            "default": null
        }, 
        {
            "info": "Name of model image(s) to initialize cleaning", 
            "dtype": "file", 
            "default": null, 
            "name": "modelimage", 
            "io": "input"
        }, 
        {
            "info": "Output Gaussian restoring beam for CLEAN image", 
            "dtype": "list:str", 
            "delimiter": " ", 
            "name": "restoringbeam", 
            "default": null
        }, 
        {
            "info": "Output primary beam-corrected image", 
            "dtype": "bool", 
            "default": false, 
            "name": "pbcor"
        }, 
        {
            "info": "Minimum PB level to use", 
            "dtype": "float", 
            "default": 0.2, 
            "name": "minpb"
        }, 
        {
            "info": "True if to save model visibilities in MODEL_DATA column", 
            "dtype": "bool", 
            "default": false, 
            "name": "usescratch"
        }, 
        {
            "info": "Divide large image cubes into channel chunks for deconvolution", 
            "dtype": "bool", 
            "default": false, 
            "name": "allowchunk"
        }, 
        {
            "info": "Convert output images to FITS files", 
            "dtype": "bool", 
            "default": true, 
            "name": "port2fits"
        }, 
        {
            "info": "Keep casa images when 'port2fits' is enabled", 
            "dtype": "bool", 
            "default": false, 
            "name": "keep_casa_images"
        }, 
        {
            "info": "Noise image to compute sigma for stopping threshold (in case specified it will replace threshold)", 
            "dtype": "file", 
            "default": null, 
            "name": "noise_image", 
            "io": "input"
        }, 
        {
            "info": "Noise sigma for stopping deconvolution in the case where noise_image is provided (new thresh = sigma*noise_image.std())", 
            "dtype": "float", 
            "default": 3, 
            "name": "noise_sigma"
        }
    ]
}
