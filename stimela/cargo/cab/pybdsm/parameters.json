{
    "task": "pybdsm", 
    "base": "stimela/lofar", 
    "tag": "0.3.2", 
    "description": "Source finding in radio images", 
    "prefix": " ", 
    "binary": "python", 
    "msdir": false, 
    "parameters": [
        {
            "info": "Input image file name", 
            "name": "image", 
            "io": "input", 
            "default": null, 
            "dtype": "file", 
            "mapping": "filename"
        }, 
        {
            "info": "Use adaptive rms_box when determining rms and mean maps", 
            "dtype": "bool", 
            "default": false, 
            "name": "adaptive_rms_box"
        }, 
        {
            "info": "Decompose Gaussian residual image into multiple scales", 
            "dtype": "bool", 
            "default": false, 
            "name": "atrous_do"
        }, 
        {
            "info": "Perform source extraction on each wavelet scale", 
            "dtype": "bool", 
            "default": false, 
            "name": "atrous_bdsm_do"
        }, 
        {
            "info": "Max allowed wavelength order, 0 => calculate inside program", 
            "dtype": "int", 
            "default": 0, 
            "name": "atrous_jmax"
        }, 
        {
            "info": "Low pass filter, either 'b3' or 'tr', for B3 spline or Triangle", 
            "dtype": "str", 
            "default": "b3", 
            "name": "atrous_lpf", 
            "choices": [
                "b3", 
                "tr"
            ]
        }, 
        {
            "info": "Restrict wavelet Gaussians to islands found in original image", 
            "dtype": "bool", 
            "default": false, 
            "name": "atrous_orig_isl"
        }, 
        {
            "info": "Fit to the sum of remaining wavelet scales", 
            "dtype": "bool", 
            "default": true, 
            "name": "atrous_sum"
        }, 
        {
            "info": "Use fast SciPy FFT for convolution", 
            "dtype": "bool", 
            "default": true, 
            "name": "use_scipy_fft"
        }, 
        {
            "info": "FWHM of restoring beam. Specify as (maj, min, pos ang E of N) in degrees. E.g., beam = (0.06, 0.02, 13.3). None => get from header", 
            "dtype": "list:float", 
            "default": null, 
            "name": "beam"
        }, 
        {
            "info": "Show options for Gaussian flagging", 
            "dtype": "bool", 
            "default": false, 
            "name": "flagging_opts"
        }, 
        {
            "info": "Frequency in Hz of input image. E.g., frequency = 74e6. None => get from header.", 
            "dtype": "float", 
            "default": null, 
            "name": "frequency"
        }, 
        {
            "info": "Background mean map: 'default' => calc whether to use or not, 'zero' => 0, 'const' => clipped mean, 'map' => use 2-D map", 
            "dtype": "str", 
            "default": "default", 
            "name": "mean_map", 
            "choices": [
                "default", 
                "zero", 
                "const", 
                "map"
            ]
        }, 
        {
            "info": "If True and beam_spectrum is None, then assume header beam is for median frequency and scales with frequency for channels", 
            "dtype": "bool", 
            "default": false, 
            "name": "beam_sp_derive"
        }, 
        {
            "info": "Get beams for each channel in FITS header. Eg. BMAJ1, BMAJ1, BPA1; BMAJ2, BMIN2, BPA2", 
            "dtype": "bool", 
            "default": false, 
            "name": "multi_chan_beam"
        }, 
        {
            "info": "FWHM of synthesized beam per channel. Specify as [(bmaj_ch1, bmin_ch1, bpa_ch1), (bmaj_ch2, bmin_ch2, bpa_ch2), etc.] in degrees. E.g., beam_spectrum = [(0.01, 0.01, 45.0), (0.02,0.01, 34.0)] for two channels. None => all equal to beam", 
            "dtype": "list:list", 
            "default": null, 
            "name": "beam_spectrum"
        }, 
        {
            "info": "List of channels to average if collapse_mode = 'average', starting from 0. E.g., collapse_av = [0, 1, 5]. [] => all", 
            "dtype": "list:int", 
            "default": null, 
            "name": "collapse_av"
        }, 
        {
            "info": "Number of the channel for source extraction, if collapse_mode = 'single', starting from 0", 
            "dtype": "int", 
            "default": 0, 
            "name": "collapse_ch0"
        }, 
        {
            "info": "Collapse method: 'average' or 'single'. Average channels or take single channel to perform source detection on", 
            "dtype": "str", 
            "default": "average", 
            "name": "collapse_mode", 
            "choices": [
                "average", 
                "single"
            ]
        }, 
        {
            "info": "Frequency in Hz of channels in input image when more than one channel is present. E.g., frequency_sp = [74e6, 153e6]. None => get from header", 
            "dtype": "list:float", 
            "default": null, 
            "name": "frequency_sp"
        }, 
        {
            "info": "Box size, step size for rms/mean map calculation. Specify as (box, step) in pixels. E.g., rms_box = (40, 10) => box of 40x40 pixels, step of 10 pixels. None => calculate inside program", 
            "dtype": "list:int", 
            "default": null, 
            "name": "rms_box"
        }, 
        {
            "info": "Background rms map: True => use 2-D rms map; False => use constant rms; None => calculate inside program", 
            "dtype": "bool", 
            "default": null, 
            "name": "rms_map"
        }, 
        {
            "info": "Type of thresholding: None => calculate inside program, 'fdr' => use false detection rate algorithm, 'hard' => use sigma clipping", 
            "dtype": "str", 
            "default": null, 
            "name": "thresh", 
            "choices": [
                "fdr", 
                "hard", 
                null
            ]
        }, 
        {
            "info": "Threshold for the island boundary in number of sigma above the mean. Determines extent of island used for fitting", 
            "dtype": "float", 
            "default": 3.0, 
            "name": "thresh_isl"
        }, 
        {
            "info": "Source detection threshold: threshold for the island peak in number of sigma above the mean. If false detection rate thresholding is used, this value is ignored and thresh_pix is calculated inside the program", 
            "dtype": "float", 
            "default": 5.0, 
            "name": "thresh_pix"
        }, 
        {
            "info": "Radius of aperture in pixels inside which aperture fluxes are measured for each source. None => no aperture fluxes measured", 
            "dtype": "bool", 
            "default": null, 
            "name": "aperture"
        }, 
        {
            "info": "Position the aperture (if aperture is not None) on: 'centroid' or 'peak' of the source.", 
            "dtype": "str", 
            "default": "centroid", 
            "name": "aperture_posn", 
            "choices": [
                "centroid", 
                "peak"
            ]
        }, 
        {
            "info": "Limit in Jy/beam below which pixels are blanked. None => no such blanking is done", 
            "dtype": "float", 
            "default": null, 
            "name": "blank_limit"
        }, 
        {
            "info": "Theoretical estimate of number of beams per source. None => calculate inside program", 
            "dtype": "float", 
            "default": null, 
            "name": "bmpersrc_th"
        }, 
        {
            "info": "Check for pixels outside the universe", 
            "dtype": "bool", 
            "default": false, 
            "name": "check_outsideuniv"
        }, 
        {
            "info": "Detection image file name used only for detecting islands of emission. Source measurement is still done on the main image", 
            "dtype": "file", 
            "default": null, 
            "name": "detection_image", 
            "io": "input"
        }, 
        {
            "info": "Cache internally derived images to disk", 
            "dtype": "bool", 
            "default": false, 
            "name": "do_cache"
        }, 
        {
            "info": "stimate uncertainties for 'M'-type sources using Monte Carlo method", 
            "dtype": "bool", 
            "default": false, 
            "name": "do_mc_errors"
        }, 
        {
            "info": "Alpha for FDR algorithm for thresholds", 
            "dtype": "float", 
            "default": 0.05, 
            "name": "fdr_alpha"
        }, 
        {
            "info": "For thresh = None; if #false_pix / #source_pix < fdr_ratio, thresh = 'hard' else thresh = 'fdr'", 
            "dtype": "float", 
            "default": 0.1, 
            "name": "fdr_ratio"
        }, 
        {
            "info": "Sigma for clipping Gaussians while creating fitted image", 
            "dtype": "float", 
            "default": 0.1, 
            "name": "fittedimage_clip"
        }, 
        {
            "info": "Fix major and minor axes and PA of Gaussians to beam?", 
            "dtype": "bool", 
            "default": true, 
            "name": "fix_to_beam"
        }, 
        {
            "info": "Group all Gaussians in each island into a single source", 
            "dtype": "bool", 
            "default": false, 
            "name": "group_by_isl"
        }, 
        {
            "info": "Group Gaussians into sources using 'intensity' map or 'curvature' map", 
            "dtype": "str", 
            "default": "intensity", 
            "name": "group_method", 
            "choices": [
                "intensity", 
                "curvature"
            ]
        }, 
        {
            "info": "Tolerance for grouping of Gaussians into sources: larger values will result in larger sources", 
            "dtype": "float", 
            "default": 1.0, 
            "name": "group_tol"
        }, 
        {
            "info": "Initial guess for Gaussian parameters: 'default', 'simple', or 'nobeam'", 
            "dtype": "str", 
            "default": "default", 
            "name": "ini_gausfit", 
            "choices": [
                "default", 
                "simple", 
                "nobeam"
            ]
        }, 
        {
            "info": "Method by which inital guess for fitting of Gaussians is chosen: 'intensity' or 'curvature'", 
            "dtype": "str", 
            "default": "intensity", 
            "name": "ini_method", 
            "choices": [
                "intensity", 
                "curvature"
            ]
        }, 
        {
            "info": "Kappa for clipped mean and rms. None => calculate inside program", 
            "dtype": "float", 
            "default": null, 
            "name": "kappa_clip"
        }, 
        {
            "info": "Minimum number of pixels with emission per island (minimum is 6 pixels). None -> calculate inside program", 
            "dtype": "int", 
            "default": null, 
            "name": "minpix_isl"
        }, 
        {
            "info": "Number of cores to use during fitting, None => use all", 
            "dtype": "int", 
            "default": null, 
            "name": "ncores"
        }, 
        {
            "info": "Find and fit peaks of large islands iteratively", 
            "dtype": "bool", 
            "default": true, 
            "name": "peak_fit"
        }, 
        {
            "info": "If island size in beam area is more than this, attempt to fit peaks iteratively (if peak_fit = True). Min value is 30", 
            "dtype": "float", 
            "default": 30.0, 
            "name": "peak_maxsize"
        }, 
        {
            "info": "Value of constant rms in Jy/beam to use if rms_map = False. None => calculate inside program", 
            "dtype": "float", 
            "default": null, 
            "name": "rms_value"
        }, 
        {
            "info": "Rank of the interpolating function for rms/mean map", 
            "dtype": "int", 
            "default": 3, 
            "name": "spline_rank"
        }, 
        {
            "info": "Split island if it is too large, has a large convex deficiency and it opens well.", 
            "dtype": "bool", 
            "default": true, 
            "name": "split_isl"
        }, 
        {
            "info": "If island size in beam area is more than this, consider splitting island. Min value is 50", 
            "dtype": "float", 
            "default": 50.0, 
            "name": "splitisl_maxsize"
        }, 
        {
            "info": "List of source positions at which fitting is done.  E.g., src_ra_dec = [(197.1932, 47.9188), (196.5573, 42.4852)]", 
            "dtype": "list:list", 
            "default": null, 
            "name": "src_ra_dec"
        }, 
        {
            "info": "Radius of the island (if src_ra_dec is not None) in pixels. None => radius is set to the FWHM of the beam major axis.", 
            "dtype": "int", 
            "default": null, 
            "name": "src_radius_pix"
        }, 
        {
            "info": "Stops after: 'isl' = island finding step or 'read' = image reading step", 
            "dtype": "str", 
            "default": null, 
            "name": "stop_at", 
            "choices": [
                "isl", 
                "read"
            ]
        }, 
        {
            "info": "Do source detection on only a part of the image. Specify as (xmin, xmax, ymin, ymax) in pixels. E.g., trim_box = (120, 840, 15, 895). None => use entire image", 
            "dtype": "list:int", 
            "default": null, 
            "name": "trim_box"
        }, 
        {
            "info": "Output file name. None => file is named automatically; 'SAMP' => send to SAMP hub (e.g., to TOPCAT, ds9, or Aladin)", 
            "name": "outfile", 
            "io": "output", 
            "default": null, 
            "dtype": "file", 
            "required": true
        }, 
        {
            "info": "BBS format, type of patch to use: None => no patches. 'single' => all Gaussians in one patch. 'gaussian' => each Gaussian gets its own patch. 'source' => all Gaussians belonging to a single source are grouped into one patch. 'mask' => use mask file specified by bbs_patches_mask", 
            "dtype": "str", 
            "default": null, 
            "name": "bbs_patches", 
            "choices": [
                "single", 
                "gaussian", 
                "source", 
                "mask", 
                null
            ]
        }, 
        {
            "info": "Name of the mask file (of same size as input image) that defines the patches if bbs_patches = 'mask'", 
            "dtype": "file", 
            "default": null, 
            "name": "bbs_patches_mask", 
            "io": "input"
        }, 
        {
            "info": "Type of catalog to write:  'gaul' - Gaussian list, 'srl' - source list (formed by grouping Gaussians), 'shap' - shapelet list (FITS format only)", 
            "dtype": "str", 
            "default": "gaul", 
            "name": "catalog_type", 
            "choices": [
                "srl", 
                "gaul", 
                "shap"
            ]
        }, 
        {
            "info": "Overwrite existing file?", 
            "dtype": "bool", 
            "default": true, 
            "name": "clobber"
        }, 
        {
            "info": "Correct source parameters for image projection (BBS format only)?", 
            "dtype": "bool", 
            "default": true, 
            "name": "correct_proj"
        }, 
        {
            "info": "Format of output catalog", 
            "dtype": "str", 
            "default": "fits", 
            "name": "format", 
            "choices": [
                "bbs", 
                "ds9", 
                "fits", 
                "star", 
                "kvis", 
                "ascii", 
                "csv", 
                "casabox", 
                "sagecal"
            ]
        }, 
        {
            "info": "Include flux densities from each channel (if any)?", 
            "dtype": "bool", 
            "default": false, 
            "name": "incl_chan"
        }, 
        {
            "info": "Include islands without any valid Gaussians (source list only)?", 
            "dtype": "bool", 
            "default": false, 
            "name": "incl_empty"
        }, 
        {
            "info": "Name for entries in the output catalog (BBS format only). None => use image file name", 
            "dtype": "file", 
            "default": null, 
            "name": "srcroot", 
            "io": "output"
        }, 
        {
            "info": "Convert output model to tigger format", 
            "dtype": "bool", 
            "default": true, 
            "name": "port2tigger"
        }, 
        {
            "info": "Calculate spectral indices (for multi-channel image)", 
            "dtype": "bool", 
            "default": false, 
            "name": "spectralindex_do"
        }, 
        {
            "info": "Start frequency (unit => Hz)", 
            "dtype": "float", 
            "default": null, 
            "name": "freq0"
        }
    ]
}