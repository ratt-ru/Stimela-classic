{
    "task": "tricolour", 
    "base": "stimela/tricolour", 
    "tag": "1.2.5", 
    "version" : "0.1.7",
    "description": "A variant of the Science Data Processing flagging code, wrapped in dask, operating on Measurement Sets", 
    "prefix": "--", 
    "binary": "/opt/code/dist/tricolourexe/tricolourexe", 
    "msdir": true, 
    "parameters": [
        {
            "info": "MS to be flagged (single MS)", 
            "name": "ms", 
            "io": "msfile", 
            "default": false, 
            "dtype": "file", 
            "required": true
        }, 
        {
            "info": "YAML config file containing parameters for the flagger in the 'sum_threshold' key.", 
            "dtype": "file", 
            "name": "config", 
            "io": "input"
        }, 
        {
            "info": " Ingnore existing flags", 
            "dtype": "bool", 
            "name": "ignore-flags"
        }, 
        {
            "info": "Flagging Strategy. If 'standard' all correlations in the visibility are flagged independently. If 'polarisation' the polarised intensity sqrt(Q^2 + U^2 + V^2) is calculated and used to flag all correlations in the visibility", 
            "dtype": "str", 
            "name": "flagging-strategy", 
            "choices": [
                "standard", 
                "polarisation", 
                "total_power"
            ]
        }, 
        {
            "info": "Hint indicating the number of Measurement Set rows to read in a single chunk. Smaller and larger numbers will tend to respectively decrease or increase both memory usage and computational efficiency", 
            "dtype": "int", 
            "name": "row-chunks"
        }, 
        {
            "info": "Number of baselines in a window chunk", 
            "dtype": "int", 
            "name": "baseline-chunks"
        }, 
        {
            "info": "Number of workers (threads) to use. By default, set to twice the number of logical CPUs on the system. Many workers can also affect memory usage on systems with many cores.", 
            "dtype": "int", 
            "name": "nworkers"
        }, 
        {
            "info": "Number of channels to dilate as int or string with units", 
            "dtype": [
                "int", 
                "str"
            ], 
            "name": "dilate-masks"
        }, 
        {
            "info": "Name of visibility data column to flag", 
            "dtype": "str", 
            "name": "data-column"
        }, 
        {
            "info": "Scan numbers to flag", 
            "dtype": "str", 
            "name": "scan-numbers"
        }, 
        {
            "info": "Columns to subtract from 'data-column' to form residuals to flag on", 
            "dtype": "str", 
            "name": "subtract-model-column"
        }, 
        {
            "info": "Name(s) of fields to flag. Defaults to flagging all", 
            "dtype": "list:str", 
            "name": "field-names"
        }, 
        {
            "info": "Disable the default behaviour of starting the Interactive Python Debugger upon an unhandled exception. This may be necessary for batch pipelining", 
            "dtype": "bool", 
            "name": "-dpm, --disable-post-mortem"
        }, 
        {
            "info": "Visibility and flag data is re-ordered from a MS row ordering into time-frequency windows ordered by baseline. For smaller problems, it may be possible to pack a couple of scans worth of visibility data  into memory, but for larger problem sizes, it is necessary to reorder the data on disk", 
            "dtype": "str", 
            "name": "window-backend", 
            "choices": [
                "numpy", 
                "zarr-disk"
            ]
        }
    ]
}
